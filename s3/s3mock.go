// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package s3

import (
	"io"
	"sync"
)

var (
	lockClientMockGet sync.RWMutex
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
//     func TestSomethingThatUsesClient(t *testing.T) {
//
//         // make and configure a mocked Client
//         mockedClient := &ClientMock{
//             GetFunc: func(key string) (io.ReadCloser, *int64, error) {
// 	               panic("mock out the Get method")
//             },
//         }
//
//         // use mockedClient in code that requires Client
//         // and then make assertions.
//
//     }
type ClientMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(key string) (io.ReadCloser, *int64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Key is the key argument value.
			Key string
		}
	}
}

// Get calls GetFunc.
func (mock *ClientMock) Get(key string) (io.ReadCloser, *int64, error) {
	if mock.GetFunc == nil {
		panic("ClientMock.GetFunc: method is nil but Client.Get was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	lockClientMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockClientMockGet.Unlock()
	return mock.GetFunc(key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedClient.GetCalls())
func (mock *ClientMock) GetCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	lockClientMockGet.RLock()
	calls = mock.calls.Get
	lockClientMockGet.RUnlock()
	return calls
}
