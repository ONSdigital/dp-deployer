// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package secret

import (
	"sync"
)

var (
	lockVaultClientMockWrite sync.RWMutex
)

// Ensure, that VaultClientMock does implement VaultClient.
// If this is not the case, regenerate this file with moq.
var _ VaultClient = &VaultClientMock{}

// VaultClientMock is a mock implementation of VaultClient.
//
//	    func TestSomethingThatUsesVaultClient(t *testing.T) {
//
//	        // make and configure a mocked VaultClient
//	        mockedVaultClient := &VaultClientMock{
//	            WriteFunc: func(path string, data map[string]interface{}) error {
//		               panic("mock out the Write method")
//	            },
//	        }
//
//	        // use mockedVaultClient in code that requires VaultClient
//	        // and then make assertions.
//
//	    }
type VaultClientMock struct {
	// WriteFunc mocks the Write method.
	WriteFunc func(path string, data map[string]interface{}) error

	// calls tracks calls to the methods.
	calls struct {
		// Write holds details about calls to the Write method.
		Write []struct {
			// Path is the path argument value.
			Path string
			// Data is the data argument value.
			Data map[string]interface{}
		}
	}
}

// Write calls WriteFunc.
func (mock *VaultClientMock) Write(path string, data map[string]interface{}) error {
	if mock.WriteFunc == nil {
		panic("VaultClientMock.WriteFunc: method is nil but VaultClient.Write was just called")
	}
	callInfo := struct {
		Path string
		Data map[string]interface{}
	}{
		Path: path,
		Data: data,
	}
	lockVaultClientMockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	lockVaultClientMockWrite.Unlock()
	return mock.WriteFunc(path, data)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//
//	len(mockedVaultClient.WriteCalls())
func (mock *VaultClientMock) WriteCalls() []struct {
	Path string
	Data map[string]interface{}
} {
	var calls []struct {
		Path string
		Data map[string]interface{}
	}
	lockVaultClientMockWrite.RLock()
	calls = mock.calls.Write
	lockVaultClientMockWrite.RUnlock()
	return calls
}
