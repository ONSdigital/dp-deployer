// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/ONSdigital/dp-deployer/handler/secret"
	"sync"
)

var (
	lockVaultClientMockWrite sync.RWMutex
)

// Ensure, that VaultClientMock does implement secret.VaultClient.
// If this is not the case, regenerate this file with moq.
var _ secret.VaultClient = &VaultClientMock{}

// VaultClientMock is a mock implementation of secret.VaultClient.
//
//     func TestSomethingThatUsesVaultClient(t *testing.T) {
//
//         // make and configure a mocked secret.VaultClient
//         mockedVaultClient := &VaultClientMock{
//             WriteFunc: func(path string, key string) (string, error) {
// 	               panic("mock out the Write method")
//             },
//         }
//
//         // use mockedVaultClient in code that requires secret.VaultClient
//         // and then make assertions.
//
//     }
type VaultClientMock struct {
	// WriteFunc mocks the Write method.
	WriteFunc func(path string, key string) (string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Write holds details about calls to the Write method.
		Write []struct {
			// Path is the path argument value.
			Path string
			// Key is the key argument value.
			Key string
		}
	}
}

// Write calls WriteFunc.
func (mock *VaultClientMock) Write(path string, key string) (string, error) {
	if mock.WriteFunc == nil {
		panic("VaultClientMock.WriteFunc: method is nil but VaultClient.Write was just called")
	}
	callInfo := struct {
		Path string
		Key  string
	}{
		Path: path,
		Key:  key,
	}
	lockVaultClientMockWrite.Lock()
	mock.calls.Write = append(mock.calls.Write, callInfo)
	lockVaultClientMockWrite.Unlock()
	return mock.WriteFunc(path, key)
}

// WriteCalls gets all the calls that were made to Write.
// Check the length with:
//     len(mockedVaultClient.WriteCalls())
func (mock *VaultClientMock) WriteCalls() []struct {
	Path string
	Key  string
} {
	var calls []struct {
		Path string
		Key  string
	}
	lockVaultClientMockWrite.RLock()
	calls = mock.calls.Write
	lockVaultClientMockWrite.RUnlock()
	return calls
}
